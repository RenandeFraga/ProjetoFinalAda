# -*- coding: utf-8 -*- 
"""CREDITO_MUNICIPIO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iNgW-28oKHkMi9HlXH2L0C7F5Rx8Xbwf

#Instalação de bibliotecas
"""

!pip install pyspark

!pip install gcsfs

from pyspark.sql import SparkSession
import pyspark.sql.functions as F
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from google.cloud import storage
import os
warnings.filterwarnings("ignore")

#CONFIGURAR A VARIÁVEL DE AMBIENTE (SESSÃO)
spark = (SparkSession.builder
                     .master('local')
                     .appName('projeto_final_teste')
                     .config('spark.ui.port', '4050')
                     .config("spark.jars", '/content/drive/MyDrive/analise_credito_municipio.csv')
                     .getOrCreate()
)

#IMPORTEM O DATAFRAME DO DRIVE
df = (
    spark.read
         .format('csv')
         .option('delimiter', ';')
         .option('header', 'true')
         .option('inferschema', 'true')
         .load('/content/drive/MyDrive/analise_credito_municipio.csv')
)

"""#Pré-Análise"""

df.show(truncate=False)

df.printSchema()

print(f'({df.count()}, {len(df.columns)})')

"""#Verificação de valores Duplicados e Nulos"""

#VERIFICAR A QUANTIDADE DE REGISTROS REMOVENDO AS LINHAS DUPLICADAS
df.dropDuplicates().count()
total = df.count() - df.dropDuplicates().count()
print(f'Total de Registros Duplicados = {total}')

#VERIFICANDO VALORES NULOS
df.select([F.count(F.when(F.col(c).isNull(), c)).alias(c) for c in df.columns]).show()

##DROPANDO VALORES NULOS
df = df.dropna(how='any')

"""#Dropando colunas que não vão ser utilizadas"""

df = df.drop(F.col('N�mero do Processo/PVL'), F.col('Codigo IBGE'))

df.show(truncate=False)

df.printSchema()

"""##VERIFICAÇÃO DE VALORES DE CADA COLUNA"""

df.select(F.col('Interessado')).distinct().count()

df.select(F.col('Uf')).distinct().count()

df.select(F.col('Uf')).distinct().show()

df.select(F.col('Tipo de interessado')).distinct().show()

df.select(F.col('Tipo de operacao')).distinct().count()

df.select(F.col('Tipo de operacao')).distinct().show(truncate=False)

df.select(F.col('Finalidade')).distinct().show(truncate=False)

df.select(F.col('Tipo de credor')).distinct().show(truncate=False)

df.select(F.col('Credor')).distinct().show(truncate=False)

df.select(F.col('Credor')).distinct().count()

df.select(F.col('Moeda')).distinct().show(truncate=False)

df.select(F.col('Analisado por')).distinct().show(truncate=False)